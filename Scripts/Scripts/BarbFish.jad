// Decompiled by DJ v3.7.7.81 Copyright 2004 Atanas Neshkov  Date: 9/18/04 2:57:39 PM
// Home Page : http://members.fortunecity.com/neshkov/dj.html  - Check often for new version!
// Decompiler options: packimports(3) 
// Source File Name:   BarbFish.java

import java.io.PrintStream;

public class BarbFish extends Script
{

    public BarbFish(mudclient mudclient)
    {
        super(mudclient);
        Fishinglevels = 0;
        trout = 0;
        salmon = 0;
        exp = 0;
        cookexp = 0;
        cook = 0;
    }

    public String[] getCommands()
    {
        return (new String[] {
            "powerfish", "cookbank", "bankfish", "cookfish"
        });
    }

    public void ServerMessage(String s)
    {
        if(s.equals("@gam@You catch a trout"))
        {
            System.out.println("Obtained Trout. Trout Count: " + (trout + 1));
            trout++;
            exp += 50;
        } else
        if(s.equals("@gre@You just advanced 1 fishing level!"))
        {
            Wait(1000);
            System.out.println("Fishing Level! Current Fishing Level: " + GetStat(10));
            Fishinglevels++;
        } else
        if(s.equals("@gam@You catch a salmon"))
        {
            System.out.println("Obtained Salmon. Salmon Count: " + (salmon + 1));
            salmon++;
            exp += 70;
        } else
        if(s.equals("@gam@The salmon is now nicely cooked"))
        {
            System.out.println("Cooked a Salmon. Cook Count: " + (cook + 1));
            cookexp += 90;
            cook++;
        } else
        if(s.equals("@gam@The trout is now nicely cooked"))
        {
            System.out.println("Cooked a Trout. Cook Count: " + (cook + 1));
            cookexp += 70;
            cook++;
        } else
        if(s.equals("@gre@You just advanced 1 cooking level!"))
        {
            Wait(1000);
            System.out.println("Cooking Level! Current Cooking Level: " + GetStat(7));
            Cookinglevels++;
        }
    }

    public void start(String s, String as[])
    {
        DisplayMessage("@gre@Barb Fisher By @ran@S@ran@a@ran@g@ran@s", 3);
        System.out.println("     BarbFisher by Sags Started     ");
        System.out.println("-------------------------------------");
        System.out.println("Current Fishing Level: " + GetStat(10));
        System.out.println("Current Cooking Level: " + GetStat(7));
        if(s.equalsIgnoreCase("powerfish"))
            do
            {
                if(!Running())
                    break;
                for(; Fatigue() >= 90 && Running() && !Sleeping(); Wait(3000))
                {
                    System.out.println("Fatigue is at " + Fatigue() + "%. sleep time");
                    Use(FindInv(1263));
                }

                if(!Sleeping())
                {
                    AtObject(208, 501);
                    Wait(200);
                }
            } while(true);
        if(s.equalsIgnoreCase("cookfish"))
            for(; Running(); Wait(100))
            {
                for(; InvCount() < 30 && Running(); Wait(100))
                {
                    for(; Fatigue() > 90 && Running() && !Sleeping(); Wait(3000))
                    {
                        System.out.println("Fatigue is at " + Fatigue() + "%. Sleep Time");
                        Use(FindInv(1263));
                    }

                    for(; Sleeping() && Running(); Wait(1));
                    AtObject(208, 501);
                }

                Wait(100);
                Walk(213, 502);
                Wait(200);
                Walk(221, 502);
                Wait(200);
                Walk(225, 503);
                Wait(200);
                Walk(232, 504);
                Wait(200);
                for(; ObjectAt(232, 503) == 64 && Running(); Wait(2000))
                {
                    System.out.println("Opened door.");
                    AtObject(232, 503);
                }

                Walk(235, 496);
                Wait(200);
                while(InvCount() == 30) 
                {
                    while(InvCount(358) > 0 && Running() && !Sleeping()) 
                    {
                        UseOnObject(234, 495, FindInv(358));
                        Wait(2600);
                        while(Fatigue() > 90 && Running() && !Sleeping()) 
                        {
                            System.out.println("Fatigue is at " + Fatigue() + "%. Sleep Time");
                            Use(FindInv(1263));
                            Wait(3000);
                        }
                    }
                    while(InvCount(356) > 0 && Running() && !Sleeping()) 
                    {
                        UseOnObject(234, 495, FindInv(356));
                        Wait(2600);
                        while(Fatigue() > 90 && Running() && !Sleeping()) 
                        {
                            System.out.println("Fatigue is at " + Fatigue() + "%. Sleep Time");
                            Use(FindInv(1263));
                            Wait(3000);
                        }
                    }
                    for(; InvCount(360) > 0 && Running() && !Sleeping(); Wait(100))
                        Drop(FindInv(360));

                    for(; InvCount(357) > 0 && Running() && !Sleeping(); Wait(100))
                        Use(FindInv(357));

                    while(InvCount(359) > 0 && Running() && !Sleeping()) 
                    {
                        Use(FindInv(359));
                        Wait(100);
                    }
                }
                Walk(232, 502);
                Wait(100);
                for(; ObjectAt(232, 503) == 64 && Running(); Wait(2000))
                {
                    System.out.println("Opened door.");
                    AtObject(232, 503);
                }

                Walk(226, 503);
                Wait(100);
                Walk(214, 501);
                Wait(100);
                Walk(212, 501);
            }

        if(s.equalsIgnoreCase("bankfish"))
            for(; Running(); Wait(100))
            {
                for(; InvCount() < 30 && Running(); Wait(100))
                {
                    for(; Fatigue() > 90 && Running() && !Sleeping(); Wait(3000))
                    {
                        System.out.println("Fatigue is at " + Fatigue() + "%. Sleep Time");
                        Use(FindInv(1263));
                    }

                    for(; Sleeping() && Running(); Wait(1));
                    AtObject(208, 501);
                }

                Walk(211, 501);
                Walk(211, 501);
                Wait(100);
                Walk(213, 497);
                Wait(100);
                Walk(215, 493);
                Wait(100);
                Walk(217, 488);
                Wait(100);
                Walk(218, 483);
                Wait(100);
                Walk(220, 478);
                Wait(100);
                Walk(221, 470);
                Wait(100);
                Walk(224, 466);
                Wait(100);
                Walk(224, 458);
                Wait(100);
                Walk(222, 449);
                Wait(100);
                Walk(217, 447);
                Wait(100);
                for(; ObjectAt(217, 447) != 63 && Running(); Wait(1000))
                {
                    System.out.println("Opened Bank door.");
                    AtObject(217, 447);
                }

                while(!Bank() && Running()) 
                {
                    while(!QuestMenu() && Running()) 
                    {
                        int i = GetNearestNPC(95);
                        TalkToNPC(i);
                        long l2 = System.currentTimeMillis();
                        while(System.currentTimeMillis() - l2 <= 2000L && !QuestMenu() && Running()) 
                            Wait(1);
                    }
                    Answer(0);
                    long l = System.currentTimeMillis();
                    while(System.currentTimeMillis() - l <= 5000L && !Bank() && Running()) 
                        Wait(1);
                }
                if(Running())
                    for(; InvCount(356) > 0 && Running() && Bank(); Wait(100))
                    {
                        System.out.println("Depositting " + InvCount(356) + " trout");
                        Deposit(356, 1);
                    }

                if(Running())
                    for(; InvCount(358) > 0 && Running() && Bank(); Wait(100))
                    {
                        System.out.println("Depositting " + InvCount(358) + " salmon");
                        Deposit(358, 1);
                    }

                Walk(217, 448);
                Wait(100);
                for(; ObjectAt(217, 447) != 63 && Running(); Wait(1000))
                {
                    System.out.println("Opened Bank door.");
                    AtObject(217, 447);
                }

                Walk(220, 446);
                Wait(100);
                Walk(222, 455);
                Wait(100);
                Walk(224, 463);
                Wait(100);
                Walk(223, 471);
                Wait(100);
                Walk(221, 480);
                Wait(100);
                Walk(217, 492);
                Wait(100);
                Walk(211, 500);
            }

        if(s.equalsIgnoreCase("cookbank"))
            for(; Running(); Wait(100))
            {
                for(; InvCount() < 30 && Running(); Wait(100))
                {
                    for(; Fatigue() > 90 && Running() && !Sleeping(); Wait(3000))
                    {
                        System.out.println("Fatigue is at " + Fatigue() + "%. Sleep Time");
                        Use(FindInv(1263));
                    }

                    for(; Sleeping() && Running(); Wait(1));
                    AtObject(208, 501);
                }

                Walk(211, 501);
                Walk(211, 501);
                Wait(100);
                Walk(213, 497);
                Wait(100);
                Walk(215, 493);
                Wait(100);
                Walk(217, 488);
                Wait(100);
                Walk(218, 483);
                Wait(100);
                Walk(220, 478);
                Wait(100);
                Walk(221, 470);
                Wait(100);
                Walk(224, 466);
                Wait(100);
                Walk(224, 458);
                Wait(100);
                Walk(222, 449);
                Wait(100);
                Walk(225, 445);
                Wait(100);
                for(; DoorAt(225, 444, 0) == 2 && Running(); Wait(2000))
                {
                    System.out.println("Opened door.");
                    OpenDoor(225, 444, 0);
                }

                Walk(225, 441);
                Wait(100);
                for(; GetY() < 1000 && Running(); Wait(1000))
                    AtObject(226, 439);

                Wait(2000);
                while(InvCount(356) > 0 && Running() && !Sleeping()) 
                {
                    UseOnObject(222, 1385, FindInv(356));
                    Wait(2600);
                    while(Fatigue() > 90 && Running() && !Sleeping()) 
                    {
                        System.out.println("Fatigue is at " + Fatigue() + "%. Sleep Time");
                        Use(FindInv(1263));
                        Wait(3000);
                    }
                }
                while(InvCount(358) > 0 && Running() && !Sleeping()) 
                {
                    UseOnObject(222, 1385, FindInv(358));
                    Wait(2600);
                    while(Fatigue() > 90 && Running() && !Sleeping()) 
                    {
                        System.out.println("Fatigue is at " + Fatigue() + "%. Sleep Time");
                        Use(FindInv(1263));
                        Wait(3000);
                    }
                }
                for(; InvCount(360) > 0 && Running() && !Sleeping(); Wait(100))
                    Drop(FindInv(360));

                for(; GetY() > 1000 && Running(); Wait(1000))
                    AtObject(226, 1383);

                for(; DoorAt(225, 444, 0) == 2 && Running(); Wait(2000))
                {
                    System.out.println("Opened door.");
                    OpenDoor(225, 444, 0);
                }

                Walk(225, 445);
                Wait(100);
                Walk(217, 446);
                Wait(100);
                for(; ObjectAt(217, 447) != 63 && Running(); Wait(1000))
                {
                    System.out.println("Opened Bank door.");
                    AtObject(217, 447);
                }

                while(!Bank() && Running()) 
                {
                    while(!QuestMenu() && Running()) 
                    {
                        int j = GetNearestNPC(95);
                        TalkToNPC(j);
                        long l3 = System.currentTimeMillis();
                        while(System.currentTimeMillis() - l3 <= 2000L && !QuestMenu() && Running()) 
                            Wait(1);
                    }
                    Answer(0);
                    long l1 = System.currentTimeMillis();
                    while(System.currentTimeMillis() - l1 <= 5000L && !Bank() && Running()) 
                        Wait(1);
                }
                if(Running())
                    for(; InvCount(357) > 0 && Running() && Bank(); Wait(100))
                    {
                        System.out.println("Depositting " + InvCount(357) + " trout");
                        Deposit(357, 1);
                    }

                if(Running())
                    for(; InvCount(359) > 0 && Running() && Bank(); Wait(100))
                    {
                        System.out.println("Depositting " + InvCount(359) + " salmon");
                        Deposit(359, 1);
                    }

                Walk(217, 448);
                Wait(100);
                for(; ObjectAt(217, 447) != 63 && Running(); Wait(1000))
                {
                    System.out.println("Opened Bank door.");
                    AtObject(217, 447);
                }

                Walk(220, 446);
                Wait(100);
                Walk(222, 455);
                Wait(100);
                Walk(224, 463);
                Wait(100);
                Walk(223, 471);
                Wait(100);
                Walk(221, 480);
                Wait(100);
                Walk(217, 492);
                Wait(100);
                Walk(211, 500);
            }

        DisplayMessage("@Whi@PowerFisher @red@Stopped", 3);
        System.out.println("     BarbFisher by Sags Stopped     ");
        System.out.println("-------------------------------------");
        System.out.println("Fishing Levels Grown: " + Fishinglevels);
        System.out.println("Trout Obtained:  " + trout);
        System.out.println("Salmon Obtained:  " + salmon);
        System.out.println("Fishing Experience Gained:  " + exp);
        System.out.println("Cooking Levels Grown: " + Cookinglevels);
        System.out.println("Fish Cooked:  " + cook);
        System.out.println("Cooking Experience Gained:  " + cookexp);
    }

    public int Fishinglevels;
    public int trout;
    public int salmon;
    public int exp;
    public int cookexp;
    public int cook;
    public int Cookinglevels;
}