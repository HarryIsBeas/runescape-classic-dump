// Decompiled by DJ v3.7.7.81 Copyright 2004 Atanas Neshkov  Date: 06/10/2004 6:39:47 AM
// Home Page : http://members.fortunecity.com/neshkov/dj.html  - Check often for new version!
// Decompiler options: packimports(3) 
// Source File Name:   GuildFisher2.java

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.Date;
import javax.swing.*;

public class GuildFisher2 extends Script
    implements ActionListener
{

    public GuildFisher2(mudclient mudclient)
    {
        super(mudclient);
        Running = true;
        sleep = false;
        fishes = 0;
        fishtype = "bruncle";
        preferences = new String[2];
        slept = 0;
        startexp = 0;
        expgained = 0;
        run_script = false;
        cMode = " doing nothing";
        run = true;
    }

    public String[] getCommands()
    {
        return (new String[] {
            "guildfish"
        });
    }

    public void ServerMessage(String s)
    {
        if(s.equals("@gam@You are too tired to catch this fish") || s.equals("@gre@You are too tired to gain experience, get some rest"))
        {
            sleep = true;
            DisplayMessage("You need to sleep..", 2);
        }
        if(s.indexOf("@gam@You catch a ") >= 0)
            fishes++;
    }

    public void start(String s, String as[])
    {
        SwingUtilities.invokeLater(new Runnable() {

            public void run()
            {
                addWidgets();
            }

        });
        for(; !run_script && Running(); Wait(100));
        if(run_script)
            RunScipt();
    }

    private void setupReport()
    {
        reportFrame = new JFrame("Bruncle's Guild Fisher: Progress Report");
        reportFrame.setDefaultCloseOperation(3);
        reportFrame.setSize(new Dimension(325, 400));
        reportPanel = new JPanel(new GridLayout(4, 8));
        reportFrame.getContentPane().add(reportPanel, "Center");
        pMode = new JLabel("You are currently" + cMode);
        pMode.setFont(new Font("Helvetica", 1, 18));
        pMins = new JLabel("You have been fishing for " + minutes + " minutes", 2);
        pMins.setFont(new Font("Helvetica", 1, 12));
        pFished = new JLabel("You have fished " + fishes + " " + fishtype + "s", 2);
        pFished.setFont(new Font("Helvetica", 1, 12));
        pLevels = new JLabel("You have gained " + fLevels + " fishing levels", 2);
        pLevels.setFont(new Font("Helvetica", 1, 12));
        pExp = new JLabel("You have gained " + expgained + " fishing experience", 2);
        pExp.setFont(new Font("Helvetica", 1, 12));
        pSlept = new JLabel("You have slept " + slept + " times", 2);
        pSlept.setFont(new Font("Helvetica", 1, 12));
        empty = new JLabel("", 2);
        reportPanel.add(pMode);
        reportPanel.add(empty);
        reportPanel.add(pMins);
        reportPanel.add(pFished);
        reportPanel.add(pLevels);
        reportPanel.add(pExp);
        reportPanel.add(pSlept);
        pMode.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        pMins.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        pFished.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        pLevels.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        pExp.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        pSlept.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        reportFrame.pack();
        reportFrame.setVisible(true);
    }

    public void showReport()
    {
        fLevels = GetStat(10) - sLevel;
        minutes = (System.currentTimeMillis() - starttime) / 1000L;
        expgained = GetExperience(10) - startexp;
        pMode.setText("You are currently" + cMode);
        pMins.setText("You have been fishing for " + minutes + " seconds");
        pFished.setText("You have fished " + fishes + " " + fishtype + "s");
        pLevels.setText("You have gained " + fLevels + " fishing levels");
        pExp.setText("You have gained " + expgained + " fishing experience");
        pSlept.setText("You have slept " + slept + " times");
        SwingUtilities.updateComponentTreeUI(pMode);
        SwingUtilities.updateComponentTreeUI(pMins);
        SwingUtilities.updateComponentTreeUI(pFished);
        SwingUtilities.updateComponentTreeUI(pLevels);
        SwingUtilities.updateComponentTreeUI(pExp);
        SwingUtilities.updateComponentTreeUI(pSlept);
    }

    private void addWidgets()
    {
        fishFrame = new JFrame("Bruncle's Guild Fisher: Preferences");
        fishFrame.setDefaultCloseOperation(3);
        fishFrame.setSize(new Dimension(325, 400));
        fishPanel = new JPanel(new GridLayout(4, 8));
        fishFrame.getRootPane().setDefaultButton(save);
        fishFrame.getContentPane().add(fishPanel, "Center");
        String as[] = {
            "Fish then cert", "Fish then cook then cert"
        };
        String as1[] = {
            "Lobster", "Shark"
        };
        fishModeLabel = new JLabel("Fishing Mode?", 2);
        emptylabel1 = new JLabel("");
        fishLabel = new JLabel("Fish what?", 2);
        fishMode = new JComboBox(as);
        save = new JButton("Save choices");
        fish = new JComboBox(as1);
        save.addActionListener(this);
        fishPanel.add(fishModeLabel);
        fishPanel.add(fishMode);
        fishPanel.add(fishLabel);
        fishPanel.add(fish);
        fishPanel.add(save);
        fishPanel.add(emptylabel1);
        fishModeLabel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        fishLabel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        fishPanel.setBackground(Color.black);
        fish.setBackground(Color.black);
        fishMode.setBackground(Color.black);
        fishModeLabel.setForeground(Color.white);
        fishLabel.setForeground(Color.white);
        fishMode.setForeground(Color.white);
        fish.setForeground(Color.white);
        fishFrame.pack();
        fishFrame.setVisible(true);
    }

    public void actionPerformed(ActionEvent actionevent)
    {
        Object obj = fishMode.getSelectedItem();
        Object obj1 = fish.getSelectedItem();
        FM = obj.toString();
        fishtype = obj1.toString();
        run_script = true;
    }

    public void RunScipt()
    {
        fishFrame.dispose();
        long l = System.currentTimeMillis();
        starttime = l;
        sLevel = GetStat(10);
        setupReport();
        showReport();
        DisplayMessage("@red@Hello " + System.getProperty("user.name") + " I know where you live..", 3);
        Wait(1000);
        DisplayMessage("@ran@Bruncle's guild lob fisher started", 3);
        char c = '\0';
        char c1 = '\0';
        startexp = GetExperience(10);
        byte byte0 = 4;
        GetSettings();
        if(fishtype.equalsIgnoreCase("Lobster"))
        {
            c = '\u0174';
            c1 = '\u0176';
        }
        if(fishtype.equalsIgnoreCase("Shark"))
        {
            c = '\u0221';
            c1 = '\u0222';
        }
        DisplayMessage("You will " + FM + " " + fishtype, 3);
        LastTime();
        Wait(2000);
        DisplayMessage("@red@Script Starting in 5 seconds..", 3);
        Wait(1000);
        DisplayMessage("@gre@4", 2);
        Wait(1000);
        DisplayMessage("@gre@3", 2);
        Wait(1000);
        DisplayMessage("@gre@2", 2);
        Wait(1000);
        DisplayMessage("@gre@1", 2);
        Wait(1000);
        DisplayMessage("@ran@STARTING TO FISH " + fishtype, 3);
        Wait(1000);
        do
        {
            if(!Running())
                break;
            showReport();
            Wait(1000);
            do
            {
                if(InvCount() >= 30 || !Running())
                    break;
                showReport();
                if(fishtype.equalsIgnoreCase("Lobster"))
                {
                    int ai[] = GetNearestObject(376);
                    AtObject(ai[0], ai[1]);
                    cMode = " fishing lobsters";
                    showReport();
                    Wait(1000);
                }
                if(fishtype.equalsIgnoreCase("Shark"))
                {
                    int ai1[] = GetNearestObject(261);
                    AtObject2(ai1[0], ai1[1]);
                    Wait(1000);
                    cMode = " fishing sharks";
                    showReport();
                }
                if(System.currentTimeMillis() - l > 0x493e0L)
                {
                    cMode = "Saving a report..";
                    showReport();
                    l = System.currentTimeMillis();
                    Report();
                }
                if(sleep && Fatigue() >= 80 && Running())
                {
                    cMode = " sleeping";
                    showReport();
                    for(; !Sleeping() && Running(); Wait(3000))
                        Use(FindInv(1263));

                    for(; Sleeping(); Wait(5000));
                    Wait(3000);
                    sleep = false;
                    slept++;
                }
            } while(true);
            if(InvCount() == 30 && Running())
            {
                showReport();
                if(FM.equalsIgnoreCase("Fish then cert") && Running())
                {
                    cMode = " walking to certers";
                    showReport();
                    if(Running())
                    {
                        Wait(3000);
                        Walk(602, 506);
                        WalkNoWait(605, 503);
                        Wait(2000);
                    }
                    for(; GetX() == 603 && Running(); Wait(1000))
                    {
                        for(; DoorAt(603, 506, 3) == 2; Wait(2000))
                        {
                            cMode = " opening door";
                            showReport();
                            OpenDoor(603, 506, 3);
                        }

                        WalkNoWait(605, 503);
                    }

                    if(Running())
                        Walk(605, 503);
                    do
                    {
                        if(InvCount() != 30 || !Running())
                            break;
                        showReport();
                        if(c == '\u0174' && Running())
                        {
                            cMode = " certing lobsters";
                            showReport();
                            for(; !QuestMenu() && Running(); Wait(1500))
                                TalkToNPC(GetNearestNPC(369));

                            showReport();
                            if(Running())
                            {
                                Wait(1000);
                                Answer(1);
                                for(; !QuestMenu(); Wait(500));
                                Wait(1000);
                                Answer(1);
                                for(; !QuestMenu(); Wait(500));
                                Wait(1000);
                                Answer(4);
                                Wait(3000);
                                Walk(603, 505);
                            }
                        }
                        if(c == '\u0221' && Running())
                        {
                            cMode = " certing sharks";
                            showReport();
                            for(; !QuestMenu() && Running(); Wait(1500))
                                TalkToNPC(GetNearestNPC(370));

                            Wait(1000);
                            Answer(1);
                            for(; !QuestMenu(); Wait(500));
                            Wait(1000);
                            Answer(3);
                            for(; !QuestMenu(); Wait(500));
                            Wait(1000);
                            Answer(4);
                            Wait(3000);
                            Walk(603, 505);
                        }
                    } while(true);
                    for(; DoorAt(603, 506, 3) == 2 && Running(); WalkNoWait(602, 507))
                    {
                        cMode = " opening doors";
                        showReport();
                        OpenDoor(603, 506, 3);
                        Wait(2000);
                    }

                    Walk(589, 502);
                }
                if(FM.equalsIgnoreCase("Fish then cook then cert"))
                {
                    if(Running())
                    {
                        cMode = " walking to range";
                        showReport();
                        Walk(587, 508);
                        ForceWalk(586, 518);
                        Wait(4000);
                    }
                    for(; GetY() == 518 && Running(); Wait(1000))
                    {
                        showReport();
                        for(; DoorAt(586, 519, 0) == 2; Wait(2000))
                            OpenDoor(586, 519, 0);

                        ForceWalkNoWait(586, 520);
                    }

                    Wait(2000);
                    do
                    {
                        if(InvCount(c) <= 0 || !Running())
                            break;
                        cMode = " cooking fish";
                        showReport();
                        UseOnObject(583, 520, FindInv(c));
                        Wait(2500);
                        if(Fatigue() >= 80 && Running())
                        {
                            for(; !Sleeping() && Running(); Wait(3000))
                                Use(FindInv(1263));

                            for(; Sleeping(); Wait(10000));
                            sleep = false;
                            slept++;
                        }
                    } while(true);
                    for(; InvCount(c1) > 0 && Running(); showReport())
                    {
                        Drop(FindInv(c1));
                        Wait(1500);
                        cMode = " dropping burnt fish";
                    }

                    if(Running())
                    {
                        ForceWalk(586, 519);
                        Wait(3000);
                    }
                    for(; GetY() == 519 && Running(); Wait(1000))
                    {
                        cMode = " opening door at range";
                        showReport();
                        for(; DoorAt(586, 519, 0) == 2; Wait(2000))
                            OpenDoor(586, 519, 0);

                        ForceWalkNoWait(586, 518);
                    }

                    if(Running())
                    {
                        ForceWalk(602, 506);
                        WalkNoWait(605, 503);
                        Wait(2000);
                    }
                    for(; GetX() == 603 && Running(); Wait(1000))
                    {
                        cMode = " opening door at certers";
                        showReport();
                        for(; DoorAt(603, 506, 3) == 2; Wait(2000))
                            OpenDoor(603, 506, 3);

                        WalkNoWait(605, 503);
                    }

                    if(Running())
                        Walk(605, 503);
                    do
                    {
                        if(InvCount() != 30 || !Running())
                            break;
                        if(fishtype.equals("Lobster") && Running())
                        {
                            cMode = " certing lobsters";
                            showReport();
                            if(InvCount(373) < 25 && InvCount(373) >= 20)
                                byte0 = 3;
                            if(InvCount(373) < 20 && InvCount(373) >= 15)
                                byte0 = 2;
                            for(; !QuestMenu() && Running(); Wait(1500))
                                TalkToNPC(GetNearestNPC(369));

                            Wait(1000);
                            Answer(1);
                            for(; !QuestMenu(); Wait(500));
                            Wait(1000);
                            Answer(0);
                            for(; !QuestMenu(); Wait(500));
                            Wait(1000);
                            Answer(byte0);
                            Wait(3000);
                            Walk(603, 505);
                        }
                        if(fishtype.equalsIgnoreCase("Shark") && Running())
                        {
                            cMode = " certing lobsters";
                            if(InvCount(545) < 25 && InvCount(545) >= 20)
                                byte0 = 3;
                            if(InvCount(545) < 20 && InvCount(545) >= 15)
                                byte0 = 2;
                            if(InvCount(545) < 15 && InvCount(545) >= 10)
                                byte0 = 2;
                            for(; !QuestMenu() && Running(); Wait(1500))
                                TalkToNPC(GetNearestNPC(370));

                            Wait(1000);
                            Answer(1);
                            for(; !QuestMenu(); Wait(500));
                            Wait(1000);
                            Answer(2);
                            for(; !QuestMenu(); Wait(500));
                            Wait(1000);
                            Answer(byte0);
                            Wait(3000);
                            Walk(603, 505);
                        }
                    } while(true);
                    for(; GetX() != 602 && Running(); Wait(1000))
                    {
                        cMode = " opening door at certers";
                        showReport();
                        for(; DoorAt(603, 506, 3) == 2; Wait(2000))
                            OpenDoor(603, 506, 3);

                        WalkNoWait(602, 503);
                    }

                    if(Running())
                        cMode = " walking back to the pier";
                    showReport();
                    Walk(589, 502);
                    Wait(3000);
                }
            }
        } while(true);
        DisplayMessage("@dre@Stopped", 3);
        run = false;
    }

    public void Report()
    {
        Date date = new Date();
        ctime = date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();
        minutes = (System.currentTimeMillis() - starttime) / 60000L;
        System.out.println("Writing Report..");
        expgained = GetExperience(10) - startexp;
        try
        {
            BufferedWriter bufferedwriter = null;
            bufferedwriter = new BufferedWriter(new FileWriter("guildfisher.txt", true));
            bufferedwriter.write("^^PrOgReSs RePoRt @ " + ctime + "..");
            bufferedwriter.newLine();
            bufferedwriter.write("After " + minutes + " minutes:");
            bufferedwriter.newLine();
            bufferedwriter.write("You have fished " + fishes + " " + fishtype + "[s]..");
            bufferedwriter.newLine();
            bufferedwriter.write("You have gained " + expgained + " fishing experience..");
            bufferedwriter.newLine();
            bufferedwriter.write("You have slept " + slept + " times..");
            bufferedwriter.newLine();
            bufferedwriter.close();
        }
        catch(Exception exception)
        {
            System.err.println("Error writing to file");
        }
    }

    public void GetSettings()
    {
    }

    public void LastTime()
    {
        DisplayMessage("Last time you ran the script this was the progress report..:", 3);
        int i = 0;
        try
        {
            FileInputStream fileinputstream = new FileInputStream("guildfisher.txt");
            DataInputStream datainputstream = new DataInputStream(fileinputstream);
            do
            {
                int k;
                if((k = datainputstream.read()) == -1)
                    break;
                if(k == 10)
                    i++;
            } while(true);
            datainputstream.close();
        }
        catch(Exception exception)
        {
            DisplayMessage("This is the first time you've run the script:O", 3);
            System.err.println("File input error");
        }
        System.out.println("There are " + i + " lines in the text file..");
        int j = 0;
        if(i >= 1774)
            try
            {
                FileOutputStream fileoutputstream = new FileOutputStream("guildfisher.txt");
                PrintStream printstream = new PrintStream(fileoutputstream);
                printstream.println("");
                printstream.close();
            }
            catch(Exception exception2)
            {
                System.err.println("Error writing to file");
            }
        try
        {
            FileInputStream fileinputstream1 = new FileInputStream("guildfisher.txt");
            DataInputStream datainputstream1 = new DataInputStream(fileinputstream1);
            for(; j != i - 5; j++)
                datainputstream1.readLine();

            if(j == i - 5)
            {
                DisplayMessage(datainputstream1.readLine(), 3);
                Wait(1000);
                DisplayMessage(datainputstream1.readLine(), 3);
                Wait(1000);
                DisplayMessage(datainputstream1.readLine(), 3);
                Wait(1000);
                DisplayMessage(datainputstream1.readLine(), 3);
                Wait(1000);
                DisplayMessage(datainputstream1.readLine(), 3);
                Wait(1000);
            }
            datainputstream1.close();
        }
        catch(Exception exception1)
        {
            System.err.println("File input error");
        }
    }

    boolean Running;
    Thread reportThread;
    Graphics g;
    public boolean sleep;
    public int fishes;
    public String fishtype;
    public long starttime;
    public long minutes;
    public String preferences[];
    public int slept;
    public int startexp;
    public int expgained;
    public String FM;
    public String ctime;
    boolean run_script;
    public String cMode;
    public int fLevels;
    public int sLevel;
    boolean run;
    JFrame fishFrame;
    JFrame reportFrame;
    JPanel fishPanel;
    JPanel reportPanel;
    JLabel fishModeLabel;
    JLabel fishLabel;
    JLabel emptylabel1;
    JLabel pMode;
    JLabel pMins;
    JLabel pExp;
    JLabel pFished;
    JLabel pLevels;
    JLabel pSlept;
    JLabel empty;
    JButton save;
    JComboBox fishMode;
    JComboBox fish;

}